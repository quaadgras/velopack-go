package velopack

import (
	"encoding/json"
	"errors"
	"unsafe"
)

var (
	ErrPlatformNotSupported = errors.New("platform not supported by velopack") // returned when !((windows || linux || darwin) && (arm64 || amd64))
	ErrDisabledCGO          = errors.New("cgo is disabled")                    // returned when cgo is disabled, which is required for velopack.
)

// UpdateStatus represents the result of a call to check for updates.
type UpdateStatus int

const (
	UpdateError       UpdateStatus = -1
	UpdateAvailable   UpdateStatus = 0
	NoUpdateAvailable UpdateStatus = 1
	RemoteIsEmpty     UpdateStatus = 2
)

var app App

// App helps you to handle app activation events correctly. This should be passed to [Run] as early as possible in your application startup code.
// (eg. the beginning of main() or wherever your entry point is)
type App struct {
	AutoApplyOnStartup bool           // sets whether to automatically apply downloaded updates on startup.
	Args               []string       // Overrides the command line arguments used by VelopackApp.
	Locator            *LocatorConfig // Sets the locator configuration to use for the VelopackApp.

	HookFirstRun  func(psz_app_version string) // This hook is triggered when the application is started for the first time after installation.
	HookRestarted func(psz_app_version string) // This hook is triggered when the application is restarted by Velopack after installing updates.

	// WARNING: Windows hooks are run during critical stages of Velopack operations.
	// Your code will be run and then the process will exit.
	// If your code has not completed within 30 seconds, it will be terminated.
	// Only supported on windows; On other operating systems, these callbacks will never be called.
	WindowsHookAfterInstall    func(psz_app_version string)
	WindowsHookBeforeUninstall func(psz_app_version string)
	WindowsHookBeforeUpdate    func(psz_app_version string)
	WindowsHookAfterUpdate     func(psz_app_version string)

	Logger func(psz_level, psz_message string) // Will be called for all log messages generated by the Velopack library.
}

type SourceCustomCallbacks struct {
	source *UpdateSource // Keep a reference to the UpdateSource for constructing the progress callback.

	// ReleaseFeedFunc should return the raw JSON string of the release.json feed.
	ReleaseFeedFunc func(psz_releases_name string) json.RawMessage
	/*
	   DownloadAssetFunc is expected to download the provided asset to the provided local file path.
	   Throughout, you can use the progress callback to write progress reports (0-100). The function should
	   return true if the download was successful, false otherwise.
	*/
	DownloadAssetFunc func(asset *Asset, local_path string, progress_callback func(progress int16)) bool
}

// Asset is an individual Velopack asset, could refer to an asset on-disk or in a remote package feed.
type Asset struct {
	either[*UpdateInfo, *Asset]

	handle unsafe.Pointer // opaque handle to the underlying C asset, if applicable.

	PackageID     string    // The name or ID of the package containing this release.
	Version       string    // The version of this release.
	Type          AssetType // The type of asset (eg. "Full" or "Delta").
	Filename      string    // The filename of the update package containing this release.
	SHA1          string    // The SHA1 checksum of the update package containing this release.
	SHA256        string    // The SHA256 checksum of the update package containing this release.
	Size          uint64    // The size in bytes of the update package containing this release.
	NotesMarkdown string    // The release notes in markdown format, as passed to Velopack when packaging the release. This may be an empty string.
	NotesHTML     string    // The release notes in HTML format, transformed from Markdown when packaging the release. This may be an empty string.
}

// AssetType (eg. "Full" or "Delta").
type AssetType string

const (
	AssetTypeFull  AssetType = "Full"
	AssetTypeDelta AssetType = "Delta"
)

// UpdateOptions to customise the behaviour of UpdateManager.
type UpdateOptions struct {
	updateOptionsAndLocatorConfig

	/*
		Allows UpdateManager to update to a version that's lower than the current version (i.e. downgrading).
		This could happen if a release has bugs and was retracted from the release feed, or if you're using
		ExplicitChannel to switch channels to another channel where the latest version on that
		channel is lower than the current version.
	*/
	AllowVersionDowngrade bool
	/*
		This option should usually be left None/NULL**.
		Overrides the default channel used to fetch updates.
		The default channel will be whatever channel was specified on the command line when building this release.
		For example, if the current release was packaged with '--channel beta', then the default channel will be 'beta'.
		This allows users to automatically receive updates from the same channel they installed from. This options
		allows you to explicitly switch channels, for example if the user wished to switch back to the 'stable' channel
		without having to reinstall the application.
	*/
	ExplicitChannel string
	/*
		Sets the maximum number of deltas to consider before falling back to a full update.
		The default is 10. Set to a negative number (eg. -1) to disable deltas.
	*/
	MaximumDeltasBeforeFallback int32
}

// UpdateInfo holds information about the current version and pending updates, such as how many there are, and access to release notes.
type UpdateInfo struct {
	either[*UpdateInfo, *Asset]

	handle unsafe.Pointer // opaque handle to the underlying C update info, if applicable.

	TargetFullRelease *Asset   // The available version that we are updating to.
	BaseRelease       *Asset   // The base release that this update is based on. This is only available if the update is a delta update.
	DeltasToTarget    []*Asset // The list of delta updates that can be applied to the base version to get to the target version.
	/*
		True if the update is a version downgrade or lateral move (such as when switching channels to the same version number).
		In this case, only full updates are allowed, and any local packages on disk newer than the downloaded version will be
		deleted.
	*/
	IsDowngrade bool
}

// LocatorConfig for locating the current app important paths (eg. path to packages, update binary, and so forth).
type LocatorConfig struct {
	updateOptionsAndLocatorConfig

	RootAppDir       string // The root directory of the current app.
	UpdateExePath    string // The path to the Update.exe binary.
	PackagesDir      string // The path to the packages' directory.
	ManifestPath     string // The current app manifest.
	CurrentBinaryDir string // The directory containing the application's user binaries.
	IsPortable       bool   //  Whether the current application is portable or installed.
}

// UpdateSource is an opaque handle, to either a FileSource, HTTPSource or _CUSTOM_.
type UpdateSource struct {
	handle unsafe.Pointer
}

// UpdateManager is an opaque handle.
type UpdateManager struct {
	handle           unsafe.Pointer
	custom_callbacks []SourceCustomCallbacks // simple keep alive so that callbacks are not garbage collected whilst the UpdateManager is reachable.
}

type either[A, B any] interface {
	isEither(A, B)
}

type upto3[A, B, C any] interface {
	isUpto3(A, B, C)
}

// Silent can be passed to [UpdateManager.WaitExitThenApplyUpdates] to attempt to apply the update without showing any UI.
type Silent bool

func (Silent) isUpto3(Silent, Restart, UnsafeProcessID) {}

// Restart and specify optional command line arguments to pass to the new process when it's restarted (can be passed to
// [UpdateManager.WaitExitThenApplyUpdates]).
type Restart []string

func (Restart) isUpto3(Silent, Restart, UnsafeProcessID) {}

// UnsafeProcessID can be passed to [UpdateManager.WaitExitThenApplyUpdates] to specify a process ID to wait for before applying updates.
// This method is unsafe because it does not necessarily wait for any / the correct process to exit before applying updates. If this is 0,
// the updater will not wait for any process to exit before applying updates (Not Recommended).
type UnsafeProcessID int

func (UnsafeProcessID) isUpto3(Silent, Restart, UnsafeProcessID) {}

type updateOptionsAndLocatorConfig interface {
	isUpdateOptionsAndLocatorConfig()
}
